/*
 * Copyright 2022 Roberto Leinardi.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.github.triplet.gradle.androidpublisher.ReleaseStatus

plugins {
    id 'forlago.android-app-conventions'
    id 'forlago.app-versioning-conventions'
    alias(libs.plugins.tripletplay)
}

def useReleaseKeystore = rootProject.file("release/app-release.jks").exists()
println "Release keystore ${if (useReleaseKeystore) "" else "NOT "}found!"

android {

    defaultConfig {
        applicationId config.android.applicationId
        archivesBaseName = "forlago"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner" // https://github.com/google/dagger/issues/2033

        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("release/app-debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            if (useReleaseKeystore) {
                storeFile rootProject.file("release/app-release.jks")
                storePassword project.properties['RELEASE_KEYSTORE_PWD']
                keyAlias "release"
                keyPassword project.properties['RELEASE_KEYSTORE_PWD']
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }

        release {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                // Otherwise just use the debug keystore (this is mainly for PR CI builds)
                signingConfig signingConfigs.debug
            }
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        benchmark {
            initWith buildTypes.release
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
            proguardFiles('benchmark-rules.pro')
        }

    }
}

def serviceAccountCredentialsFile = rootProject.file("release/play-account.json")
if (serviceAccountCredentialsFile.exists()) {
    play {
        serviceAccountCredentials = serviceAccountCredentialsFile
        releaseStatus = (track.get() == "internal") ? ReleaseStatus.COMPLETED : ReleaseStatus.DRAFT
        defaultToAppBundles = true
    }
}
println "play-account.json ${if (serviceAccountCredentialsFile.exists()) "" else "NOT "}found!"

dependencies {
    // Modules
    implementation projects.modules.featureAccount
    implementation projects.modules.featureBar
    implementation projects.modules.featureDebug
    implementation projects.modules.featureFoo

    implementation libs.androidx.activity.compose
    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.startup
    implementation libs.play.core
    implementation libs.play.core.ktx

    kaptAndroidTest libs.hilt.android.compiler

    debugImplementation libs.androidx.compose.tooling
}
